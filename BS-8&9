// Find the number of 1â€™s in sorted binary array 

#include <stdio.h>

int countOnes(int arr[], int n) {
    int low = 0, high = n - 1, count = 0;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == 1) {
            count = n - mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    return count;
}

int main() {
    int arr[] = {0, 0, 0, 1, 1, 1, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    int count = countOnes(arr, n);
    printf("Number of 1's in the array: %d\n", count);
    return 0;
}

// Find the Peak Element in an Array 

#include <stdio.h>

int findPeakElement(int arr[], int n) {
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid]))
            return mid;

        if (mid > 0 && arr[mid - 1] > arr[mid])
            high = mid - 1;

        else
            low = mid + 1;
    }

    return -1; // If no peak element is found
}

int main() {
    int arr[] = {1, 2, 3, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    int peak = findPeakElement(arr, n);

    if (peak != -1)
        printf("Peak element is %d\n", arr[peak]);
    else
        printf("No peak element found\n");

    return 0;
}
