// Find the number of rotations in a circularly sorted array

#include <stdio.h>

int countRotations(int arr[], int low, int high) {
    if (high < low)
        return 0;

    if (high == low)
        return low;

    int mid = low + (high - low) / 2;

    if (mid < high && arr[mid] < arr[mid + 1])
        return mid;

    if (mid > low && arr[mid] < arr[mid - 1])
        return mid - 1;

    if (arr[mid] > arr[low])
        return countRotations(arr, mid + 1, high);

    return countRotations(arr, low, mid - 1);
}

int main() {
    int arr[] = {15, 18, 2, 3, 6, 12};
    int n = sizeof(arr) / sizeof(arr[0]);
    int rotations = countRotations(arr, 0, n - 1);
    printf("Number of rotations is %d\n", rotations);
    return 0;
}

//search an element in a circular sorted array

#include <stdio.h>

int search(int arr[], int n, int x) {
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] == x)
            return mid;

        // If arr[low..mid] is sorted
        if (arr[low] <= arr[mid]) {
            if (x >= arr[low] && x <= arr[mid])
                high = mid - 1;
            else
                low = mid + 1;
        } else {
            // If arr[mid..high] is sorted
            if (x >= arr[mid] && x <= arr[high])
                low = mid + 1;
            else
                high = mid - 1;
        }
    }

    return -1; // Element not found
}

int main() {
    int arr[] = {12, 14, 18, 21, 3, 6, 8, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int x = 3;

    int result = search(arr, n, x);
    if (result == -1)
        printf("Element is not present in array\n");
    else
        printf("Element is present at index %d\n", result);

    return 0; 1 
}
